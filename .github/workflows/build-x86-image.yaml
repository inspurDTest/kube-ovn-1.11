name: Build x86 Image

on:
  pull_request:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'
  push:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true
  



env:
  GO_VERSION: ''
  GOSEC_VERSION: '2.15.0'
  HELM_VERSION: v3.11.1

jobs:
  build-kube-ovn-base:
    name: Build kube-ovn-base
    runs-on: ubuntu-22.04
    outputs:
      build-base: ${{ steps.build.outputs.build-base }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

  build-kube-ovn:
    name: Build kube-ovn
    runs-on: ubuntu-22.04
    needs:
    - build-kube-ovn-base
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION || '' }}
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Unit test
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make ut

      - name: Install gosec
        run: |
          tmp=$(mktemp -d)
          archive="gosec_${{ env.GOSEC_VERSION }}_$(go env GOHOSTOS)_$(go env GOHOSTARCH).tar.gz"
          wget -q -O "$tmp/$archive" https://github.com/securego/gosec/releases/download/v${{ env.GOSEC_VERSION }}/$archive
          tar --no-same-owner -C "$tmp" -xzf "$tmp/$archive"
          install "$tmp/gosec" /usr/local/bin
          rm -rf $tmp

      - name: Download base images
        if: needs.build-kube-ovn-base.outputs.build-base == 1
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn-base

      - name: Load base images
        if: needs.build-kube-ovn-base.outputs.build-base == 1
        run: docker load --input image-amd64.tar

      - name: Build
        run: |
          go mod tidy
          git diff --exit-code
          make lint
          if [ ${{ needs.build-kube-ovn-base.outputs.build-base || 0 }} = 1 ]; then
            TAG=$(cat VERSION)
            docker tag kubeovn/kube-ovn-base:$TAG-amd64 kubeovn/kube-ovn-base:$TAG
            docker tag kubeovn/kube-ovn-base:$TAG-amd64-no-avx512 kubeovn/kube-ovn-base:$TAG-no-avx512
            docker tag kubeovn/kube-ovn-base:$TAG-debug-amd64 kubeovn/kube-ovn-base:$TAG-debug
            make build-kube-ovn
          else
            make image-kube-ovn
          fi
          make tar-kube-ovn

      - name: Upload images to artifact
        uses: actions/upload-artifact@v3
        with:
          name: kube-ovn
          path: kube-ovn.tar

  build-vpc-nat-gateway:
    name: Build vpc-nat-gateway
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Build
        run: |
          make image-vpc-nat-gateway
          make tar-vpc-nat-gateway

      - name: Upload image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: vpc-nat-gateway
          path: vpc-nat-gateway.tar

  build-centos-compile:
    name: Build centos-compile
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Build
        run: |
          make image-centos-compile
          make tar-centos-compile

      - name: Upload centos7-compile image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: centos7-compile
          path: centos7-compile.tar

      # - name: Upload centos8-compile image to artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: centos8-compile
      #     path: centos8-compile.tar

  
  netpol-path-filter:
    name: Network Policy Path Filter
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-22.04
    outputs:
      test-netpol: ${{ steps.filter.outputs.kube-ovn-controller }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION || '' }}
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: Generate path filter
        run: |
          filter=".github/path-filters.yaml"
          cat > $filter <<EOF
          kube-ovn-controller:
          - go.mod
          - go.sum
          EOF

          sh hack/go-list.sh pkg/controller | while read f; do
            echo "- $f" | tee -a $filter
          done

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.base_ref || github.ref_name }}
          filters: .github/path-filters.yaml
          list-files: csv

  push:
    name: Push Images
    needs:
      - build-centos-compile
      - build-kube-ovn
      - build-kube-ovn-base
      - build-vpc-nat-gateway
      - build-centos-compile
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Download kube-ovn image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Download vpc-nat-gateway image
        uses: actions/download-artifact@v3
        with:
          name: vpc-nat-gateway

      - name: Download centos7-compile image
        uses: actions/download-artifact@v3
        with:
          name: centos7-compile

      # - name: Download centos8-compile image
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: centos8-compile

      - name: Load image
        run: |
          docker load --input kube-ovn.tar
          docker load --input vpc-nat-gateway.tar
          docker load --input centos7-compile.tar
          # docker load --input centos8-compile.tar

      - name: Push
        run: |
          cat VERSION
          TAG=$(cat VERSION) 
          docker login -u inspurwyd  -p  dckr_pat_yMRt21vCZj0PlDl14xJiqSOHeVg
          docker tag kubeovn/kube-ovn:$TAG inspurwyd/kube-ovn:$TAG-x86
          docker tag kubeovn/kube-ovn:$TAG-debug inspurwyd/kube-ovn:$TAG-debug-x86
          docker images
          docker push inspurwyd/kube-ovn:$TAG-x86
          docker push inspurwyd/kube-ovn:$TAG-debug-x86

